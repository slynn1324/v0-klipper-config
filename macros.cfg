  
[gcode_macro _CLIENT_EXTRUDE]
description: Extrudes, if the extruder is hot enough
gcode:
  {% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
  {% set use_fw_retract = False if not macro_found
                     else False if client.use_fw_retract is not defined
                     else True  if client.use_fw_retract|lower == 'true' and printer.firmware_retraction is defined
                     else False %}

  {% set length = (params.LENGTH|float) if params.LENGTH is defined
             else 1.0 if not macro_found
             else client.unretract|default(1.0) %}

  {% set speed = params.SPEED if params.SPEED is defined
            else 35 if not macro_found
            else client.speed_unretract|default(35) %}

  {% set absolute_extrude = printer.gcode_move.absolute_extrude %}

  {% if printer.extruder.can_extrude %}
    {% if use_fw_retract %}
      {% if length < 0 %}
        G10
      {% else %}
        G11
      {% endif %}
    {% else %}
      M83
      G1 E{length} F{(speed|float|abs) * 60}
      {% if absolute_extrude %}
        M82
      {% endif %}
    {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}

[gcode_macro _CLIENT_RETRACT]
description: Retracts, if the extruder is hot enough
gcode:
  {% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}

  {% set length = (params.LENGTH|float) if params.LENGTH is defined
             else 1.0 if not macro_found
             else client.retract|default(1.0) %}

  {% set speed = params.SPEED if params.SPEED is defined
            else 35 if not macro_found
            else client.speed_retract|default(35) %}

  _CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}


[gcode_macro FILAMENT_UNLOAD]
description: Unload filament
variable_extruder_target: 0
gcode:
  SAVE_GCODE_STATE NAME=sl_filament_unload_state
  M300 # beep
  _CLIENT_EXTRUDE LENGTH=2 SPEED=5 # purge 2 mm first
  _CLIENT_RETRACT LENGTH=30 SPEED=5 # retract 50 mm
  _CLIENT_RETRACT LENGTH=30 SPEED=5 # retract 50 mm
  M300 # beep
  M300 #beep
  RESTORE_GCODE_STATE NAME=sl_filament_unload_state

[gcode_macro FILAMENT_LOAD]
description: Load filament
gcode:
  SAVE_GCODE_STATE NAME=sl_filament_load_state
  M300 # beep
  _CLIENT_EXTRUDE LENGTH=20 SPEED=2.5
  _CLIENT_EXTRUDE LENGTH=40 SPEED=5
  _CLIENT_EXTRUDE LENGTH=40 SPEED=5
  _CLIENT_RETRACT LENGTH=15 SPEED=35
  M300 # beep
  M300 # beep
  RESTORE_GCODE_STATE NAME=sl_filament_load_state
  
[gcode_macro M600]
description: Filament change
gcode: 
  PAUSE
  RESPOND MSG="Filament Change Required"
  NOTIFY_PUSHOVER MSG="Filament Change Required"

[gcode_macro NOTIFY_PUSHOVER]
description: Send Pushover
gcode:
  {% if 'MSG' in params %}
    {action_call_remote_method("notify", 
      name="pushover", 
      message=params.MSG)}
  {% endif %}


## redefine M204 to work like Marlin, where only one of p or t are required.
## klipper fundamentally doesn't support different P(rint) and T(ravel) accelerations, as the nozzle is likely touching the print anyway.
## this uses the lower of the two values if both are present.
## note: PrusaSlicer profile Marlin (legacy) appears to only use M204 S{speed}, where Marlin 2 profiles use M204 P{value} which klipper ignores by default.
## https://github.com/Desuuuu/klipper-macros/blob/master/macros/M204.cfg
## https://github.com/Klipper3d/klipper/issues/2492
[gcode_macro M204]
rename_existing: M204.1
gcode:
  {% set f = params.F|default(0.5)|float %}

  {% if 'S' in params %}
    {% set s = params.S|float %}
    SET_VELOCITY_LIMIT ACCEL={s} ACCEL_TO_DECEL={ s * f }
  {% else %}
    {% if 'P' in params %}
      {% set p = params.P|float %}
      {% if 'T' in params %}
        {% set t = params.T|float %}
        {% if p < t %}
          SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
        {% else %}
          SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
        {% endif %}
      {% else %}
        SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
      {% endif %}
    {% elif 'T' in params %}
      {% set t = params.T|float %}
      SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
    {% endif %}
  {% endif %}